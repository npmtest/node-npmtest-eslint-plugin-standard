{"/home/travis/build/npmtest/node-npmtest-eslint-plugin-standard/test.js":"/* istanbul instrument in package npmtest_eslint_plugin_standard */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-standard/lib.npmtest_eslint_plugin_standard.js":"/* istanbul instrument in package npmtest_eslint_plugin_standard */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_eslint_plugin_standard = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_eslint_plugin_standard = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-standard/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-eslint-plugin-standard && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_eslint_plugin_standard */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_eslint_plugin_standard\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_eslint_plugin_standard.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_eslint_plugin_standard.rollup.js'] =\n            local.assetsDict['/assets.npmtest_eslint_plugin_standard.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_eslint_plugin_standard.__dirname + '/lib.npmtest_eslint_plugin_standard.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-standard/node_modules/eslint-plugin-standard/index.js":"'use strict'\n\nmodule.exports = {\n  rules: {\n    'array-bracket-even-spacing': require('./rules/array-bracket-even-spacing.js'),\n    'computed-property-even-spacing': require('./rules/computed-property-even-spacing.js'),\n    'object-curly-even-spacing': require('./rules/object-curly-even-spacing.js'),\n    'no-callback-literal': require('./rules/no-callback-literal.js')\n  },\n  rulesConfig: {\n    'object-curly-even-spacing': 0,\n    'array-bracket-even-spacing': 0,\n    'computed-property-even-spacing': 0,\n    'no-callback-literal': 0\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-standard/node_modules/eslint-plugin-standard/rules/array-bracket-even-spacing.js":"'use strict'\n\n/**\n * @fileoverview Disallows or enforces spaces inside of array brackets.\n * @author Jamund Ferguson\n * @copyright 2015 Jamund Ferguson. All rights reserved.\n * @copyright 2014 Brandyn Bennett. All rights reserved.\n * @copyright 2014 Michael Ficarra. No rights reserved.\n * @copyright 2014 Vignesh Anand. All rights reserved.\n */\n// ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    docs: {}\n  },\n\n  create: function (context) {\n    var spaced = context.options[0] === 'always'\n    var either = context.options[0] === 'either'\n\n    /**\n     * Determines whether an option is set, relative to the spacing option.\n     * If spaced is \"always\", then check whether option is set to false.\n     * If spaced is \"never\", then check whether option is set to true.\n     * @param {Object} option - The option to exclude.\n     * @returns {boolean} Whether or not the property is excluded.\n     */\n    function isOptionSet (option) {\n      return context.options[1] != null ? context.options[1][option] === !spaced : false\n    }\n\n    var options = {\n      either: either,\n      spaced: spaced,\n      singleElementException: isOptionSet('singleValue'),\n      objectsInArraysException: isOptionSet('objectsInArrays'),\n      arraysInArraysException: isOptionSet('arraysInArrays')\n    }\n\n    // --------------------------------------------------------------------------\n    // Helpers\n    // --------------------------------------------------------------------------\n\n    /**\n     * Determines whether two adjacent tokens are have whitespace between them.\n     * @param {Object} left - The left token object.\n     * @param {Object} right - The right token object.\n     * @returns {boolean} Whether or not there is space between the tokens.\n     */\n    function isSpaced (left, right) {\n      return left.range[1] < right.range[0]\n    }\n\n    /**\n     * Determines whether two adjacent tokens are on the same line.\n     * @param {Object} left - The left token object.\n     * @param {Object} right - The right token object.\n     * @returns {boolean} Whether or not the tokens are on the same line.\n     */\n    function isSameLine (left, right) {\n      return left.loc.start.line === right.loc.start.line\n    }\n\n    /**\n     * Reports that there shouldn't be a space after the first token\n     * @param {ASTNode} node - The node to report in the event of an error.\n     * @param {Token} token - The token to use for the report.\n     * @returns {void}\n     */\n    function reportNoBeginningSpace (node, token) {\n      context.report(node, token.loc.start,\n        \"There should be no space after '\" + token.value + \"'\")\n    }\n\n    /**\n     * Reports that there shouldn't be a space before the last token\n     * @param {ASTNode} node - The node to report in the event of an error.\n     * @param {Token} token - The token to use for the report.\n     * @returns {void}\n     */\n    function reportNoEndingSpace (node, token) {\n      context.report(node, token.loc.start,\n        \"There should be no space before '\" + token.value + \"'\")\n    }\n\n    /**\n     * Reports that there should be a space after the first token\n     * @param {ASTNode} node - The node to report in the event of an error.\n     * @param {Token} token - The token to use for the report.\n     * @returns {void}\n     */\n    function reportRequiredBeginningSpace (node, token) {\n      context.report(node, token.loc.start,\n        \"A space is required after '\" + token.value + \"'\")\n    }\n\n    /**\n     * Reports that there should be a space before the last token\n     * @param {ASTNode} node - The node to report in the event of an error.\n     * @param {Token} token - The token to use for the report.\n     * @returns {void}\n     */\n    function reportRequiredEndingSpace (node, token) {\n      context.report(node, token.loc.start,\n        \"A space is required before '\" + token.value + \"'\")\n    }\n\n    /**\n     * Checks if a start and end brace in a node are spaced evenly\n     * and not too long (>1 space)\n     * @param node\n     * @param start\n     * @param end\n     * @returns {boolean}\n     */\n    function isEvenlySpacedAndNotTooLong (node, start, end) {\n      var expectedSpace = start[1].range[0] - start[0].range[1]\n      var endSpace = end[1].range[0] - end[0].range[1]\n      return endSpace === expectedSpace && endSpace <= 1\n    }\n\n    /**\n     * Validates the spacing around array brackets\n     * @param {ASTNode} node - The node we're checking for spacing\n     * @returns {void}\n     */\n    function validateArraySpacing (node) {\n      if (node.elements.length === 0) {\n        return\n      }\n\n      var first = context.getFirstToken(node)\n      var second = context.getFirstToken(node, 1)\n      var penultimate = context.getLastToken(node, 1)\n      var last = context.getLastToken(node)\n\n      var openingBracketMustBeSpaced =\n      (options.objectsInArraysException && second.value === '{') ||\n      (options.arraysInArraysException && second.value === '[') ||\n      (options.singleElementException && node.elements.length === 1)\n        ? !options.spaced : options.spaced\n\n      var closingBracketMustBeSpaced =\n      (options.objectsInArraysException && penultimate.value === '}') ||\n      (options.arraysInArraysException && penultimate.value === ']') ||\n      (options.singleElementException && node.elements.length === 1)\n        ? !options.spaced : options.spaced\n\n      // we only care about evenly spaced things\n      if (options.either) {\n        // newlines at any point means return\n        if (!isSameLine(first, last)) {\n          return\n        }\n\n        // confirm that the object expression/literal is spaced evenly\n        if (!isEvenlySpacedAndNotTooLong(node, [first, second], [penultimate, last])) {\n          context.report(node, 'Expected consistent spacing')\n        }\n\n        return\n      }\n\n      if (isSameLine(first, second)) {\n        if (openingBracketMustBeSpaced && !isSpaced(first, second)) {\n          reportRequiredBeginningSpace(node, first)\n        }\n        if (!openingBracketMustBeSpaced && isSpaced(first, second)) {\n          reportNoBeginningSpace(node, first)\n        }\n      }\n\n      if (isSameLine(penultimate, last)) {\n        if (closingBracketMustBeSpaced && !isSpaced(penultimate, last)) {\n          reportRequiredEndingSpace(node, last)\n        }\n        if (!closingBracketMustBeSpaced && isSpaced(penultimate, last)) {\n          reportNoEndingSpace(node, last)\n        }\n      }\n    }\n\n    // --------------------------------------------------------------------------\n    // Public\n    // --------------------------------------------------------------------------\n\n    return {\n      ArrayPattern: validateArraySpacing,\n      ArrayExpression: validateArraySpacing\n    }\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-standard/node_modules/eslint-plugin-standard/rules/computed-property-even-spacing.js":"'use strict'\n\n/**\n * @fileoverview Disallows or enforces spaces inside computed properties.\n * @author Jamund Ferguson\n * @copyright 2015 Jamund Ferguson. All rights reserved.\n */\n// ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    docs: {}\n  },\n\n  create: function (context) {\n    var propertyNameMustBeSpaced = context.options[0] === 'always' // default is \"never\"\n    var propertyNameMustBeEven = context.options[0] === 'even' // default is \"never\"\n\n    // --------------------------------------------------------------------------\n    // Helpers\n    // --------------------------------------------------------------------------\n\n    /**\n     * Determines whether two adjacent tokens are have whitespace between them.\n     * @param {Object} left - The left token object.\n     * @param {Object} right - The right token object.\n     * @returns {boolean} Whether or not there is space between the tokens.\n     */\n    function isSpaced (left, right) {\n      return left.range[1] < right.range[0]\n    }\n\n    /**\n     * Determines whether two adjacent tokens are on the same line.\n     * @param {Object} left - The left token object.\n     * @param {Object} right - The right token object.\n     * @returns {boolean} Whether or not the tokens are on the same line.\n     */\n    function isSameLine (left, right) {\n      return left.loc.start.line === right.loc.start.line\n    }\n\n    /**\n     * Reports that there shouldn't be a space after the first token\n     * @param {ASTNode} node - The node to report in the event of an error.\n     * @param {Token} token - The token to use for the report.\n     * @returns {void}\n     */\n    function reportNoBeginningSpace (node, token) {\n      context.report(node, token.loc.start,\n        \"There should be no space after '\" + token.value + \"'\")\n    }\n\n    /**\n     * Reports that there shouldn't be a space before the last token\n     * @param {ASTNode} node - The node to report in the event of an error.\n     * @param {Token} token - The token to use for the report.\n     * @returns {void}\n     */\n    function reportNoEndingSpace (node, token) {\n      context.report(node, token.loc.start,\n        \"There should be no space before '\" + token.value + \"'\")\n    }\n\n    /**\n     * Reports that there should be a space after the first token\n     * @param {ASTNode} node - The node to report in the event of an error.\n     * @param {Token} token - The token to use for the report.\n     * @returns {void}\n     */\n    function reportRequiredBeginningSpace (node, token) {\n      context.report(node, token.loc.start,\n        \"A space is required after '\" + token.value + \"'\")\n    }\n\n    /**\n     * Reports that there should be a space before the last token\n     * @param {ASTNode} node - The node to report in the event of an error.\n     * @param {Token} token - The token to use for the report.\n     * @returns {void}\n     */\n    function reportRequiredEndingSpace (node, token) {\n      context.report(node, token.loc.start,\n        \"A space is required before '\" + token.value + \"'\")\n    }\n\n    /**\n     * Returns a function that checks the spacing of a node on the property name\n     * that was passed in.\n     * @param {String} propertyName The property on the node to check for spacing\n     * @returns {Function} A function that will check spacing on a node\n     */\n    function checkSpacing (propertyName) {\n      return function (node) {\n        if (!node.computed) {\n          return\n        }\n\n        var property = node[propertyName]\n\n        var before = context.getTokenBefore(property)\n        var first = context.getFirstToken(property)\n        var last = context.getLastToken(property)\n        var after = context.getTokenAfter(property)\n        var startSpace, endSpace\n\n        if (propertyNameMustBeEven) {\n          if (!isSameLine(before, after)) {\n            context.report(node, 'Expected \"[\" and \"]\" to be on the same line')\n            return\n          }\n          startSpace = first.loc.start.column - before.loc.end.column\n          endSpace = after.loc.start.column - last.loc.end.column\n\n          if (startSpace !== endSpace || startSpace > 1) {\n            context.report(node, 'Expected 1 or 0 spaces around \"[\" and \"]\"')\n          }\n\n          return\n        }\n\n        if (isSameLine(before, first)) {\n          if (propertyNameMustBeSpaced) {\n            if (!isSpaced(before, first) && isSameLine(before, first)) {\n              reportRequiredBeginningSpace(node, before)\n            }\n          } else {\n            if (isSpaced(before, first)) {\n              reportNoBeginningSpace(node, before)\n            }\n          }\n        }\n\n        if (isSameLine(last, after)) {\n          if (propertyNameMustBeSpaced) {\n            if (!isSpaced(last, after) && isSameLine(last, after)) {\n              reportRequiredEndingSpace(node, after)\n            }\n          } else {\n            if (isSpaced(last, after)) {\n              reportNoEndingSpace(node, after)\n            }\n          }\n        }\n      }\n    }\n\n    // --------------------------------------------------------------------------\n    // Public\n    // --------------------------------------------------------------------------\n\n    return {\n      Property: checkSpacing('key'),\n      MemberExpression: checkSpacing('property')\n    }\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-standard/node_modules/eslint-plugin-standard/rules/object-curly-even-spacing.js":"'use strict'\n\n/**\n * @fileoverview Disallows or enforces spaces inside of object literals.\n * @author Jamund Ferguson\n * @copyright 2014 Brandyn Bennett. All rights reserved.\n * @copyright 2014 Michael Ficarra. No rights reserved.\n * @copyright 2014 Vignesh Anand. All rights reserved.\n * @copyright 2015 Jamund Ferguson. All rights reserved.\n */\n// ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    docs: {}\n  },\n\n  create: function (context) {\n    var spaced = context.options[0] === 'always'\n    var either = context.options[0] === 'either'\n\n    /**\n     * Determines whether an option is set, relative to the spacing option.\n     * If spaced is \"always\", then check whether option is set to false.\n     * If spaced is \"never\", then check whether option is set to true.\n     * @param {Object} option - The option to exclude.\n     * @returns {boolean} Whether or not the property is excluded.\n     */\n    function isOptionSet (option) {\n      return context.options[1] != null ? context.options[1][option] === !spaced : false\n    }\n\n    var options = {\n      spaced: spaced,\n      either: either,\n      arraysInObjectsException: isOptionSet('arraysInObjects'),\n      objectsInObjectsException: isOptionSet('objectsInObjects')\n    }\n\n    // --------------------------------------------------------------------------\n    // Helpers\n    // --------------------------------------------------------------------------\n\n    /**\n     * Determines whether two adjacent tokens are have whitespace between them.\n     * @param {Object} left - The left token object.\n     * @param {Object} right - The right token object.\n     * @returns {boolean} Whether or not there is space between the tokens.\n     */\n    function isSpaced (left, right) {\n      return left.range[1] < right.range[0]\n    }\n\n    /**\n     * Determines whether two adjacent tokens are on the same line.\n     * @param {Object} left - The left token object.\n     * @param {Object} right - The right token object.\n     * @returns {boolean} Whether or not the tokens are on the same line.\n     */\n    function isSameLine (left, right) {\n      return left.loc.start.line === right.loc.start.line\n    }\n\n    /**\n     * Reports that there shouldn't be a space after the first token\n     * @param {ASTNode} node - The node to report in the event of an error.\n     * @param {Token} token - The token to use for the report.\n     * @returns {void}\n     */\n    function reportNoBeginningSpace (node, token) {\n      context.report(node, token.loc.start,\n        \"There should be no space after '\" + token.value + \"'\")\n    }\n\n    /**\n     * Reports that there shouldn't be a space before the last token\n     * @param {ASTNode} node - The node to report in the event of an error.\n     * @param {Token} token - The token to use for the report.\n     * @returns {void}\n     */\n    function reportNoEndingSpace (node, token) {\n      context.report(node, token.loc.start,\n        \"There should be no space before '\" + token.value + \"'\")\n    }\n\n    /**\n     * Reports that there should be a space after the first token\n     * @param {ASTNode} node - The node to report in the event of an error.\n     * @param {Token} token - The token to use for the report.\n     * @returns {void}\n     */\n    function reportRequiredBeginningSpace (node, token) {\n      context.report(node, token.loc.start,\n        \"A space is required after '\" + token.value + \"'\")\n    }\n\n    /**\n     * Reports that there should be a space before the last token\n     * @param {ASTNode} node - The node to report in the event of an error.\n     * @param {Token} token - The token to use for the report.\n     * @returns {void}\n     */\n    function reportRequiredEndingSpace (node, token) {\n      context.report(node, token.loc.start,\n        \"A space is required before '\" + token.value + \"'\")\n    }\n\n    /**\n     * Checks if a start and end brace in a node are spaced evenly\n     * and not too long (>1 space)\n     * @param node\n     * @param start\n     * @param end\n     * @returns {boolean}\n     */\n    function isEvenlySpacedAndNotTooLong (node, start, end) {\n      var expectedSpace = start[1].range[0] - start[0].range[1]\n      var endSpace = end[1].range[0] - end[0].range[1]\n      return endSpace === expectedSpace && endSpace <= 1\n    }\n\n    /**\n     * Determines if spacing in curly braces is valid.\n     * @param {ASTNode} node The AST node to check.\n     * @param {Token} first The first token to check (should be the opening brace)\n     * @param {Token} second The second token to check (should be first after the opening brace)\n     * @param {Token} penultimate The penultimate token to check (should be last before closing brace)\n     * @param {Token} last The last token to check (should be closing brace)\n     * @returns {void}\n     */\n    function validateBraceSpacing (node, first, second, penultimate, last) {\n      var closingCurlyBraceMustBeSpaced =\n      (options.arraysInObjectsException && penultimate.value === ']') ||\n      (options.objectsInObjectsException && penultimate.value === '}')\n        ? !options.spaced : options.spaced\n\n      // we only care about evenly spaced things\n      if (options.either) {\n        // newlines at any point means return\n        if (!isSameLine(first, last)) {\n          return\n        }\n\n        // confirm that the object expression/literal is spaced evenly\n        if (!isEvenlySpacedAndNotTooLong(node, [first, second], [penultimate, last])) {\n          context.report(node, 'Expected consistent spacing')\n        }\n\n        return\n      }\n\n      // { and key are on same line\n      if (isSameLine(first, second)) {\n        if (options.spaced && !isSpaced(first, second)) {\n          reportRequiredBeginningSpace(node, first)\n        }\n        if (!options.spaced && isSpaced(first, second)) {\n          reportNoBeginningSpace(node, first)\n        }\n      }\n\n      // final key and } ore on the same line\n      if (isSameLine(penultimate, last)) {\n        if (closingCurlyBraceMustBeSpaced && !isSpaced(penultimate, last)) {\n          reportRequiredEndingSpace(node, last)\n        }\n        if (!closingCurlyBraceMustBeSpaced && isSpaced(penultimate, last)) {\n          reportNoEndingSpace(node, last)\n        }\n      }\n    }\n\n    // --------------------------------------------------------------------------\n    // Public\n    // --------------------------------------------------------------------------\n\n    return {\n      // var {x} = y\n      ObjectPattern: function (node) {\n        if (node.properties.length === 0) {\n          return\n        }\n\n        var firstSpecifier = node.properties[0]\n        var lastSpecifier = node.properties[node.properties.length - 1]\n\n        var first = context.getTokenBefore(firstSpecifier)\n        var second = context.getFirstToken(firstSpecifier)\n        var penultimate = context.getLastToken(lastSpecifier)\n        var last = context.getTokenAfter(lastSpecifier)\n\n        // support trailing commas\n        if (last.value === ',') {\n          penultimate = last\n          last = context.getTokenAfter(last)\n        }\n\n        validateBraceSpacing(node, first, second, penultimate, last)\n      },\n\n      // import {y} from 'x'\n      ImportDeclaration: function (node) {\n        var firstSpecifier = node.specifiers[0]\n        var lastSpecifier = node.specifiers[node.specifiers.length - 1]\n\n        // don't do anything for namespace or default imports\n        if (firstSpecifier && lastSpecifier && firstSpecifier.type === 'ImportSpecifier' && lastSpecifier.type === 'ImportSpecifier') {\n          var first = context.getTokenBefore(firstSpecifier)\n          var second = context.getFirstToken(firstSpecifier)\n          var penultimate = context.getLastToken(lastSpecifier)\n          var last = context.getTokenAfter(lastSpecifier)\n\n          validateBraceSpacing(node, first, second, penultimate, last)\n        }\n      },\n\n      // export {name} from 'yo'\n      ExportNamedDeclaration: function (node) {\n        if (!node.specifiers.length) {\n          return\n        }\n\n        var firstSpecifier = node.specifiers[0]\n        var lastSpecifier = node.specifiers[node.specifiers.length - 1]\n        var first = context.getTokenBefore(firstSpecifier)\n        var second = context.getFirstToken(firstSpecifier)\n        var penultimate = context.getLastToken(lastSpecifier)\n        var last = context.getTokenAfter(lastSpecifier)\n\n        validateBraceSpacing(node, first, second, penultimate, last)\n      },\n\n      // var y = {x: 'y'}\n      ObjectExpression: function (node) {\n        if (node.properties.length === 0) {\n          return\n        }\n\n        var first = context.getFirstToken(node)\n        var second = context.getFirstToken(node, 1)\n        var penultimate = context.getLastToken(node, 1)\n        var last = context.getLastToken(node)\n\n        validateBraceSpacing(node, first, second, penultimate, last)\n      }\n    }\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-standard/node_modules/eslint-plugin-standard/rules/no-callback-literal.js":"/**\n * Ensures that the callback pattern is followed properly\n * with an Error object (or undefined or null) in the first position.\n */\n\n'use strict'\n\n// ------------------------------------------------------------------------------\n// Helpers\n// ------------------------------------------------------------------------------\n\n/**\n * Determine if a node has a possiblity to be an Error object\n * @param  {ASTNode}  node  ASTNode to check\n * @returns {boolean}       True if there is a chance it contains an Error obj\n */\nfunction couldBeError (node) {\n  switch (node.type) {\n    case 'Identifier':\n    case 'CallExpression':\n    case 'NewExpression':\n    case 'MemberExpression':\n    case 'TaggedTemplateExpression':\n    case 'YieldExpression':\n      return true // possibly an error object.\n\n    case 'AssignmentExpression':\n      return couldBeError(node.right)\n\n    case 'SequenceExpression':\n      var exprs = node.expressions\n      return exprs.length !== 0 && couldBeError(exprs[exprs.length - 1])\n\n    case 'LogicalExpression':\n      return couldBeError(node.left) || couldBeError(node.right)\n\n    case 'ConditionalExpression':\n      return couldBeError(node.consequent) || couldBeError(node.alternate)\n\n    default:\n      return node.value === null\n  }\n}\n\n// ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    docs: {}\n  },\n\n  create: function (context) {\n    var callbackNames = context.options[0] || ['callback', 'cb']\n\n    function isCallback (name) {\n      return callbackNames.indexOf(name) > -1\n    }\n\n    return {\n\n      CallExpression: function (node) {\n        var errorArg = node.arguments[0]\n        if (errorArg && isCallback(node.callee.name)) {\n          if (!couldBeError(errorArg)) {\n            context.report(node, 'Unexpected literal in error position of callback.')\n          } else if (node.arguments.length > 1 && errorArg.type === 'Identifier') {\n            if (errorArg.name === 'undefined') {\n              context.report(node, 'Expected \"null\" instead of \"undefined\" in error position of callback.')\n            }\n          }\n        }\n      }\n    }\n  }\n}\n"}